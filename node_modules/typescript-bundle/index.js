(function () {
    var defines = {};
    var entry = [null];
    function define(name, dependencies, factory) {
        defines[name] = { dependencies: dependencies, factory: factory };
        entry[0] = name;
    }
    define("require", ["exports"], function (exports) {
        Object.defineProperty(exports, "__cjsModule", { value: true });
        Object.defineProperty(exports, "default", { value: function (name) { return resolve(name); } });
    });
    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __read = (this && this.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (this && this.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    var __values = (this && this.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    define("config/resolver", ["require", "exports", "fs", "path"], function (require, exports, fs_1, path_1) {
        "use strict";
        exports.__esModule = true;
        exports.TsConfig = exports.TsConfigResolver = void 0;
        var TsConfigResolver = (function () {
            function TsConfigResolver() {
            }
            TsConfigResolver.prototype.parse = function (content) {
                var parsed = JSON.stringify(eval('(' + content + ')'));
                return JSON.parse(parsed);
            };
            TsConfigResolver.prototype.resolve = function (tsConfigPath) {
                if (!fs_1.existsSync(tsConfigPath))
                    throw Error("Cannot read file '" + tsConfigPath + "'.");
                var current = this.parse(fs_1.readFileSync(tsConfigPath, 'utf-8'));
                if (current["extends"]) {
                    var parent_1 = this.resolve(path_1.join(path_1.dirname(tsConfigPath), current["extends"]));
                    if (parent_1.compilerOptions) {
                        current.compilerOptions = __assign(__assign({}, parent_1.compilerOptions), current.compilerOptions);
                    }
                }
                return current;
            };
            return TsConfigResolver;
        }());
        exports.TsConfigResolver = TsConfigResolver;
        exports.TsConfig = new TsConfigResolver();
    });
    define("config/index", ["require", "exports", "config/resolver"], function (require, exports, resolver_1) {
        "use strict";
        exports.__esModule = true;
        exports.TsConfig = void 0;
        __createBinding(exports, resolver_1, "TsConfig");
    });
    define("compiler/config", ["require", "exports", "config/index", "path"], function (require, exports, index_1, path_2) {
        "use strict";
        exports.__esModule = true;
        exports.TypeScriptConfiguration = void 0;
        var TypeScriptConfiguration = (function () {
            function TypeScriptConfiguration() {
            }
            TypeScriptConfiguration.read = function (tsConfigPath) {
                return index_1.TsConfig.resolve(tsConfigPath);
            };
            TypeScriptConfiguration.resolveTargetAndOutFileFromScript = function (scriptPath) {
                var resolvedScriptPath = path_2.resolve(scriptPath);
                var scriptPathDirectory = path_2.dirname(resolvedScriptPath);
                var extension = path_2.extname(resolvedScriptPath);
                var filename = path_2.basename(resolvedScriptPath, extension);
                var outFile = path_2.join(scriptPathDirectory, filename + '.js');
                return { outFile: outFile, esTarget: 'es3' };
            };
            TypeScriptConfiguration.resolveTargetAndOutFileFromTsConfig = function (tsConfigPath) {
                var tsConfigPathResolvedPath = path_2.resolve(tsConfigPath);
                var tsConfigDirectoryPath = path_2.dirname(tsConfigPathResolvedPath);
                var outFile = path_2.join(tsConfigDirectoryPath, './bundle.js');
                var output = { outFile: outFile, esTarget: 'es3' };
                var configuration = this.read(tsConfigPath);
                if (configuration.compilerOptions && configuration.compilerOptions.target) {
                    output.esTarget = configuration.compilerOptions.target.toLocaleLowerCase();
                }
                if (configuration.compilerOptions && configuration.compilerOptions.outFile) {
                    output.outFile = path_2.join(tsConfigDirectoryPath, configuration.compilerOptions.outFile);
                    return output;
                }
                if (configuration.compilerOptions && configuration.compilerOptions.outDir) {
                    var resolvedOutDir = path_2.resolve(tsConfigDirectoryPath, configuration.compilerOptions.outDir);
                    if (configuration.files && configuration.files.length > 0) {
                        var last = configuration.files[configuration.files.length - 1];
                        if (!last.includes('d.ts') && (last.includes('.ts') || last.includes('.tsx'))) {
                            var extension = path_2.extname(last);
                            var filename = path_2.basename(last, extension);
                            output.outFile = path_2.join(resolvedOutDir, filename + '.js');
                            return output;
                        }
                    }
                    output.outFile = path_2.join(resolvedOutDir, './bundle.js');
                    return output;
                }
                if (configuration.files && configuration.files.length > 0) {
                    var last = configuration.files[configuration.files.length - 1];
                    if (!last.includes('d.ts') && (last.includes('.ts') || last.includes('.tsx'))) {
                        var extension = path_2.extname(configuration.files[0]);
                        var filename = path_2.basename(configuration.files[0], extension);
                        output.outFile = path_2.join(tsConfigDirectoryPath, filename + '.js');
                        return output;
                    }
                }
                return output;
            };
            return TypeScriptConfiguration;
        }());
        exports.TypeScriptConfiguration = TypeScriptConfiguration;
    });
    define("compiler/watcher", ["require", "exports", "fs", "fs", "path"], function (require, exports, fs_2, fs_3, path_3) {
        "use strict";
        exports.__esModule = true;
        exports.Watcher = exports.WatchHandle = void 0;
        var ResetTimeout = (function () {
            function ResetTimeout(timeout, maxResets) {
                if (maxResets === void 0) { maxResets = 256; }
                this.timeout = timeout;
                this.maxResets = maxResets;
                this.resets = 0;
            }
            ResetTimeout.prototype.run = function (func) {
                var _this = this;
                this.resets += 1;
                clearTimeout(this.timer);
                if (this.resets >= this.maxResets) {
                    throw Error("ResetTimeout: exceeded maximum reset count of " + this.maxResets);
                }
                this.timer = setTimeout(function () {
                    _this.resets = 0;
                    func();
                }, this.timeout);
            };
            return ResetTimeout;
        }());
        var WatchTarget = (function () {
            function WatchTarget() {
            }
            WatchTarget.shouldCreateDirectory = function (directoryPath) {
                try {
                    var stat = fs_2.statSync(directoryPath);
                    return stat.isDirectory() ? false : true;
                }
                catch (_a) {
                    return true;
                }
            };
            WatchTarget.createDirectory = function (directoryPath) {
                var abs = path_3.resolve(process.cwd(), directoryPath).replace(/\\/g, "/");
                var parts = abs.split("/");
                var current = "";
                while (parts.length > 0) {
                    current = current + parts.shift() + "/";
                    if (this.shouldCreateDirectory(current)) {
                        fs_3.mkdirSync(current);
                    }
                }
            };
            WatchTarget.createEmptyFile = function (filePath) {
                var directoryPath = path_3.dirname(filePath);
                this.createDirectory(directoryPath);
                fs_3.writeFileSync(filePath, '');
            };
            return WatchTarget;
        }());
        var WatchHandle = (function () {
            function WatchHandle(watcher) {
                this.watcher = watcher;
            }
            WatchHandle.prototype.dispose = function () {
                this.watcher.close();
            };
            return WatchHandle;
        }());
        exports.WatchHandle = WatchHandle;
        var Watcher = (function () {
            function Watcher() {
            }
            Watcher.watch = function (filePath, func) {
                var timeout = new ResetTimeout(50);
                var resolvedFilePath = path_3.resolve(filePath);
                var resolvedDirectoryPath = path_3.dirname(resolvedFilePath);
                WatchTarget.createEmptyFile(resolvedFilePath);
                return new WatchHandle(fs_2.watch(resolvedFilePath, function (event, filePath) {
                    var joinedPath = path_3.join(resolvedDirectoryPath, filePath);
                    if (joinedPath === resolvedFilePath) {
                        if (event === 'change') {
                            timeout.run(function () {
                                var content = fs_3.readFileSync(resolvedFilePath, 'utf8');
                                func({ content: content });
                            });
                        }
                    }
                }));
            };
            return Watcher;
        }());
        exports.Watcher = Watcher;
    });
    define("compiler/typescript", ["require", "exports", "compiler/watcher", "child_process"], function (require, exports, watcher_1, child_process_1) {
        "use strict";
        exports.__esModule = true;
        exports.TypeScript = exports.TypeScriptCompilerError = void 0;
        var TypeScriptCompilerError = (function (_super) {
            __extends(TypeScriptCompilerError, _super);
            function TypeScriptCompilerError(exitcode) {
                var _this = _super.call(this, "TypeScript ended with exit code " + exitcode) || this;
                _this.exitcode = exitcode;
                return _this;
            }
            return TypeScriptCompilerError;
        }(Error));
        exports.TypeScriptCompilerError = TypeScriptCompilerError;
        var TypeScript = (function () {
            function TypeScript() {
            }
            TypeScript.compile = function (typescriptOptions, diagnosticCallback, contentCallback) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var signal, watcher, start_1, wait_1, error_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            signal = false;
                                            watcher = watcher_1.Watcher.watch(typescriptOptions.outFile, function (event) {
                                                contentCallback(event.content);
                                                signal = true;
                                            });
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 3, , 4]);
                                            return [4, this.execute(typescriptOptions, function (diagnostic) { return diagnosticCallback(diagnostic); })];
                                        case 2:
                                            _a.sent();
                                            start_1 = Date.now();
                                            wait_1 = function () {
                                                var delta = Date.now() - start_1;
                                                if (signal || delta > 1000) {
                                                    watcher.dispose();
                                                    return resolve();
                                                }
                                                setTimeout(function () { return wait_1(); }, 100);
                                            };
                                            wait_1();
                                            return [3, 4];
                                        case 3:
                                            error_1 = _a.sent();
                                            watcher.dispose();
                                            reject(error_1);
                                            return [3, 4];
                                        case 4: return [2];
                                    }
                                });
                            }); })];
                    });
                });
            };
            TypeScript.execute = function (compilerOptions, diagnosticCallback) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    var options = _this.getCompilerStartOptions(compilerOptions);
                    var proc = child_process_1.spawn(options.command, options.options);
                    proc.stdout.setEncoding('utf8');
                    proc.stderr.setEncoding('utf8');
                    proc.stdout.on('data', function (data) { return diagnosticCallback(data); });
                    proc.stderr.on('data', function (data) { return diagnosticCallback(data); });
                    proc.on('error', function (error) { return reject(error); });
                    proc.on('close', function (exitcode) {
                        if (exitcode === 0) {
                            return resolve(exitcode);
                        }
                        reject(new TypeScriptCompilerError(exitcode));
                    });
                });
            };
            TypeScript.getCompilerStartOptions = function (options) {
                var buffer = ['tsc'];
                if (options.type === 'project') {
                    buffer.push.apply(buffer, __spread(["--project", "" + options.inFile]));
                }
                else {
                    buffer.push("" + options.inFile);
                }
                buffer.push.apply(buffer, __spread(["--outFile", "" + options.outFile]));
                buffer.push.apply(buffer, __spread(["--target", "" + options.esTarget]));
                buffer.push.apply(buffer, __spread(["--module", "amd"]));
                if (options.watch) {
                    buffer.push('--watch');
                }
                return this.getStartOptions(buffer);
            };
            TypeScript.getStartOptions = function (compilerOptions) {
                if (/^win/.test(process.platform)) {
                    var command = 'cmd';
                    var options = __spread(['/c'], compilerOptions);
                    return { command: command, options: options };
                }
                else {
                    var command = 'sh';
                    var options = ['-c', compilerOptions.join(' ')];
                    return { command: command, options: options };
                }
            };
            return TypeScript;
        }());
        exports.TypeScript = TypeScript;
    });
    define("compiler/index", ["require", "exports", "compiler/config", "compiler/typescript", "compiler/typescript", "compiler/watcher"], function (require, exports, config_1, typescript_1, typescript_2, watcher_2) {
        "use strict";
        exports.__esModule = true;
        exports.Watcher = exports.TypeScript = exports.TypeScriptCompilerError = exports.TypeScriptConfiguration = void 0;
        __createBinding(exports, config_1, "TypeScriptConfiguration");
        __createBinding(exports, typescript_1, "TypeScriptCompilerError");
        __createBinding(exports, typescript_2, "TypeScript");
        __createBinding(exports, watcher_2, "Watcher");
    });
    define("command/command", ["require", "exports", "path"], function (require, exports, path_4) {
        "use strict";
        exports.__esModule = true;
        exports.Command = void 0;
        var Command = (function () {
            function Command() {
            }
            Command.assert = function (options) {
                return options;
            };
            Command.parse = function (argv) {
                var args = __spread(argv.slice(2));
                var options = {
                    commandType: 'info',
                    outFile: undefined,
                    inFile: '',
                    esTarget: undefined,
                    projectRoot: '',
                    inFileType: 'unknown',
                    exportAs: undefined,
                    importAs: [],
                    entryPoint: undefined,
                    transforms: [],
                    watch: false,
                    debug: false,
                    errorText: undefined
                };
                var next = args.shift();
                if (!next) {
                    options.commandType = 'info';
                    return options;
                }
                options.commandType = 'bundle';
                options.inFile = path_4.resolve(next);
                options.projectRoot = path_4.dirname(options.inFile);
                var name = path_4.basename(options.inFile);
                var ext = path_4.extname(options.inFile);
                switch (ext) {
                    case '.ts':
                    case '.tsx':
                        options.inFileType = "script";
                        break;
                    case '.json':
                        if (!name.includes('tsconfig')) {
                            options.commandType = 'error';
                            options.errorText = 'Must be a *.tsconfig.json file.';
                            return options;
                        }
                        options.inFileType = 'project';
                        break;
                    default: {
                        options.commandType = 'error';
                        options.errorText = "Cannot bundle with file '" + options.inFile + "'";
                        return options;
                    }
                }
                while (args.length > 0) {
                    var current = args.shift();
                    switch (current) {
                        case '--watch': {
                            options.watch = true;
                            break;
                        }
                        case '--debug': {
                            options.debug = true;
                            break;
                        }
                        case '--outFile': {
                            var next_1 = args.shift();
                            if (!next_1) {
                                options.commandType = 'error';
                                options.errorText = "expected path for --outFile";
                                return options;
                            }
                            options.outFile = path_4.resolve(next_1);
                            break;
                        }
                        case '--target': {
                            var next_2 = args.shift();
                            if (!next_2) {
                                options.commandType = 'error';
                                options.errorText = "expected expected target 'es3' | 'es5' | 'es6' | 'es2015' | 'es2016' | 'es2017' | 'es2018' | 'esnext'";
                                return options;
                            }
                            options.esTarget = next_2.toLowerCase();
                            break;
                        }
                        case '--exportAs': {
                            var next_3 = args.shift();
                            if (!next_3) {
                                options.commandType = 'error';
                                options.errorText = "expected name for --exportAs";
                                return options;
                            }
                            options.exportAs = next_3;
                            break;
                        }
                        case '--importAs': {
                            var next_4 = args.shift();
                            if (!next_4) {
                                options.commandType = 'error';
                                options.errorText = "expected <global>=<module> pair for --importAs.";
                                return options;
                            }
                            var pattern = /([a-zA-Z0-9-_$]+)=([a-zA-Z0-9-_$]+)/;
                            var match = next_4.match(pattern);
                            if (!match) {
                                options.commandType = 'error';
                                options.errorText = "expected e.g <global>=<module> pair for --importAs. got '" + next_4 + "'";
                                return options;
                            }
                            var type = 'namespace';
                            var outer = match[1];
                            var inner = match[2];
                            options.importAs.push({ type: type, outer: outer, inner: inner });
                            break;
                        }
                        case '--importAsDefault': {
                            var next_5 = args.shift();
                            if (!next_5) {
                                options.commandType = 'error';
                                options.errorText = "expected <global>=<module> pair for --importAs.";
                                return options;
                            }
                            var pattern = /([a-zA-Z0-9-_$]+)=([a-zA-Z0-9-_$]+)/;
                            var match = next_5.match(pattern);
                            if (!match) {
                                options.commandType = 'error';
                                options.errorText = "expected e.g <global>=<module> pair for --importAs. got '" + next_5 + "'";
                                return options;
                            }
                            var type = 'default';
                            var outer = match[1];
                            var inner = match[2];
                            options.importAs.push({ type: type, outer: outer, inner: inner });
                            break;
                        }
                        case '--entryPoint': {
                            var next_6 = args.shift();
                            if (!next_6) {
                                options.commandType = 'error';
                                options.errorText = "expected module name for --entryPoint";
                                return options;
                            }
                            options.entryPoint = next_6;
                            break;
                        }
                        case '--transform': {
                            var next_7 = args.shift();
                            if (!next_7) {
                                options.commandType = 'error';
                                options.errorText = "expected path for --transform.";
                                return options;
                            }
                            options.transforms.push(path_4.resolve(next_7));
                            break;
                        }
                        default: {
                            options.commandType = 'error';
                            options.errorText = "invalid option '" + current + "'";
                            return options;
                        }
                    }
                }
                return this.assert(options);
            };
            return Command;
        }());
        exports.Command = Command;
    });
    define("command/index", ["require", "exports", "command/command"], function (require, exports, command_1) {
        "use strict";
        exports.__esModule = true;
        exports.Command = void 0;
        __createBinding(exports, command_1, "Command");
    });
    define("bundler/resources/templates/render", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports.render = void 0;
        function render(moduleName, content) {
            return [
                "define(\"" + moduleName + "\", [\"exports\"], function (exports) {",
                "  Object.defineProperty(exports, \"__esModule\", { value: true });",
                "  Object.defineProperty(exports, \"default\", { value: " + content + " });",
                "});"
            ].join('\n');
        }
        exports.render = render;
    });
    define("bundler/resources/templates/directory", ["require", "exports", "path", "fs", "bundler/resources/templates/render"], function (require, exports, path_5, fs_4, render_1) {
        "use strict";
        exports.__esModule = true;
        exports.asDirectory = exports.packDirectory = void 0;
        function flatMap(array) {
            var buffer = [];
            array.forEach(function (element) { return buffer.push.apply(buffer, __spread(element)); });
            return buffer;
        }
        function fixWindowsPath(path) {
            return path.replace(new RegExp(/\\/g), '/');
        }
        function readFileEntries(directoryPath) {
            if (!fs_4.existsSync(directoryPath) || !fs_4.statSync(directoryPath).isDirectory()) {
                return [];
            }
            var contents = fs_4.readdirSync(directoryPath)
                .map(function (path) { return !path_5.isAbsolute(path) ? path_5.join(directoryPath, path) : path; })
                .map(function (path) { return fixWindowsPath(path); });
            return __spread(flatMap(contents
                .filter(function (path) { return fs_4.statSync(path).isDirectory(); })
                .map(function (path) { return readFileEntries(path); })), contents
                .filter(function (path) { return fs_4.statSync(path).isFile(); })
                .map(function (path) {
                var data = fs_4.readFileSync(path).toString('base64');
                return { path: path, data: data };
            }));
        }
        function packDirectory(directoryPath) {
            var absoluteDirectoryPath = fixWindowsPath(path_5.resolve(directoryPath));
            var entries = readFileEntries(absoluteDirectoryPath);
            return entries.reduce(function (acc, entry) {
                var key = entry.path.replace(absoluteDirectoryPath + '/', '');
                acc[key] = entry.data;
                return acc;
            }, {});
        }
        exports.packDirectory = packDirectory;
        function formatJson(data) {
            return JSON.stringify(data, null, 2)
                .split('\n')
                .map(function (n, i) { return (i > 0 ? "  " + n : n); })
                .join('\n');
        }
        function asDirectory(moduleName, filePath) {
            var directory = formatJson(packDirectory(filePath));
            return render_1.render(moduleName, directory);
        }
        exports.asDirectory = asDirectory;
    });
    define("bundler/resources/templates/text", ["require", "exports", "bundler/resources/templates/render", "fs"], function (require, exports, render_2, fs_5) {
        "use strict";
        exports.__esModule = true;
        exports.asText = void 0;
        function get(filePath) {
            try {
                var content = fs_5.readFileSync(filePath, 'utf8');
                var lines = content.split('\n').map(function (line) {
                    var text = line
                        .replace(/\r/g, '')
                        .replace(/\\/g, '\\\\"')
                        .replace(/"/g, '\\"');
                    return "    \"" + text + "\"";
                }).join(',\n');
                return "[\n" + lines + "\n  ].join('\\n')";
            }
            catch (_a) {
                return '""';
            }
        }
        function asText(moduleName, filePath) {
            return render_2.render(moduleName, get(filePath));
        }
        exports.asText = asText;
    });
    define("bundler/resources/templates/json", ["require", "exports", "fs", "bundler/resources/templates/render"], function (require, exports, fs_6, render_3) {
        "use strict";
        exports.__esModule = true;
        exports.asJson = void 0;
        function formatJson(data) {
            return JSON.stringify(data, null, 2).split('\n').map(function (n, i) { return (i > 0) ? "  " + n : n; }).join("\n");
        }
        function get(filePath) {
            var content = '';
            try {
                content = fs_6.readFileSync(filePath, 'utf8');
            }
            catch (error) {
                return formatJson({ error: 'unable to load resource' });
            }
            try {
                return formatJson(JSON.parse(content));
            }
            catch (error) {
                return JSON.stringify({ error: error.toString() });
            }
        }
        function asJson(moduleName, filePath) {
            return render_3.render(moduleName, get(filePath));
        }
        exports.asJson = asJson;
    });
    define("bundler/resources/templates/base64", ["require", "exports", "fs", "bundler/resources/templates/render"], function (require, exports, fs_7, render_4) {
        "use strict";
        exports.__esModule = true;
        exports.asBase64 = void 0;
        function get(filePath) {
            try {
                var buffer = fs_7.readFileSync(filePath);
                return "\"" + buffer.toString('base64') + "\"";
            }
            catch (_a) {
                var buffer = Buffer.from([]);
                return "\"" + buffer.toString('base64') + "\"";
            }
        }
        function asBase64(moduleName, filePath) {
            return render_4.render(moduleName, get(filePath));
        }
        exports.asBase64 = asBase64;
    });
    define("bundler/resources/templates/buffer", ["require", "exports", "fs", "bundler/resources/templates/render"], function (require, exports, fs_8, render_5) {
        "use strict";
        exports.__esModule = true;
        exports.asBuffer = void 0;
        function get(filePath) {
            try {
                var content = fs_8.readFileSync(filePath);
                var buffer = __spread(content);
                return "new Uint8Array([" + buffer.join(',') + "])";
            }
            catch (_a) {
                return "new Uint8Array([])";
            }
        }
        function asBuffer(moduleName, filePath) {
            return render_5.render(moduleName, get(filePath));
        }
        exports.asBuffer = asBuffer;
    });
    define("bundler/resources/templates/css", ["require", "exports", "path", "fs", "bundler/resources/templates/render"], function (require, exports, path_6, fs_9, render_6) {
        "use strict";
        exports.__esModule = true;
        exports.asCss = void 0;
        var CssFileNotFoundError = (function (_super) {
            __extends(CssFileNotFoundError, _super);
            function CssFileNotFoundError(filePath) {
                return _super.call(this, "bundler: css file '" + filePath + "' not found.") || this;
            }
            return CssFileNotFoundError;
        }(Error));
        var CssCyclicReadError = (function (_super) {
            __extends(CssCyclicReadError, _super);
            function CssCyclicReadError(stack) {
                var _this = _super.call(this, '') || this;
                var buffer = ['bundler: cyclic css @import detected.'];
                stack.forEach(function (item, index) {
                    var padding = Array.from({ length: index + 1 }).join('x').replace(/x/g, ' ');
                    buffer.push(padding + " \u21AA " + item);
                });
                _this.message = buffer.join('\n');
                return _this;
            }
            return CssCyclicReadError;
        }(Error));
        var CssReader = (function () {
            function CssReader(filePath) {
                this.filePath = path_6.resolve(filePath);
                this.resolved = {};
                this.resolving = {};
            }
            CssReader.prototype.parseCssFile = function (filePath) {
                filePath = path_6.resolve(filePath);
                var imports = [];
                if (!fs_9.existsSync(filePath)) {
                    throw new CssFileNotFoundError(filePath);
                }
                var contentRaw = fs_9.readFileSync(filePath, 'utf8');
                var pattern = /@import\s*["'](.*)["'];?/g;
                while (true) {
                    var result = pattern.exec(contentRaw);
                    if (!result) {
                        break;
                    }
                    var includePattern = result[0];
                    var includePathRaw = result[1];
                    var dirPath = path_6.dirname(filePath);
                    var includePath = path_6.resolve(path_6.join(dirPath, includePathRaw));
                    imports.push({ includePattern: includePattern, includePath: includePath });
                }
                var includes = imports.map(function (_import) { return _import.includePath; });
                var content = imports.reduce(function (content, include) {
                    return content.replace(new RegExp(include.includePattern, 'g'), '');
                }, contentRaw);
                return { filePath: filePath, content: content, includes: includes };
            };
            CssReader.prototype.loadCssFile = function (filePath) {
                var e_1, _a;
                filePath = path_6.resolve(filePath);
                if (this.resolved[filePath]) {
                    return;
                }
                if (this.resolving[filePath]) {
                    var stack = __spread(Object.keys(this.resolving), [filePath]);
                    throw new CssCyclicReadError(stack);
                }
                this.resolving[filePath] = filePath;
                var file = this.parseCssFile(filePath);
                try {
                    for (var _b = __values(file.includes), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var include = _c.value;
                        this.loadCssFile(include);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                delete this.resolving[filePath];
                this.resolved[filePath] = file;
            };
            CssReader.prototype.read = function () {
                var _this = this;
                this.loadCssFile(this.filePath);
                return Object.keys(this.resolved)
                    .map(function (key) { return _this.resolved[key].content; })
                    .join('\n');
            };
            return CssReader;
        }());
        function get(filePath) {
            try {
                var reader = new CssReader(filePath);
                var content = reader.read();
                var lines = content.split('\n').map(function (line) {
                    var text = line
                        .replace(/\r/g, '')
                        .replace(/\\/g, '\\\\"')
                        .replace(/"/g, '\\"');
                    return "    \"" + text + "\"";
                }).join(',\n');
                return "[\n" + lines + "\n  ].join('\\n')";
            }
            catch (error) {
                console.log(error.message + '\n');
                return '""';
            }
        }
        function asCss(moduleName, filePath) {
            return render_6.render(moduleName, get(filePath));
        }
        exports.asCss = asCss;
    });
    define("bundler/resources/templates/index", ["require", "exports", "bundler/resources/templates/directory", "bundler/resources/templates/text", "bundler/resources/templates/json", "bundler/resources/templates/base64", "bundler/resources/templates/buffer", "bundler/resources/templates/css"], function (require, exports, directory_1, text_1, json_1, base64_1, buffer_1, css_1) {
        "use strict";
        exports.__esModule = true;
        exports.asCss = exports.asBuffer = exports.asBase64 = exports.asJson = exports.asText = exports.asDirectory = void 0;
        __createBinding(exports, directory_1, "asDirectory");
        __createBinding(exports, text_1, "asText");
        __createBinding(exports, json_1, "asJson");
        __createBinding(exports, base64_1, "asBase64");
        __createBinding(exports, buffer_1, "asBuffer");
        __createBinding(exports, css_1, "asCss");
    });
    define("bundler/resources/resources", ["require", "exports", "bundler/resources/templates/index", "bundler/resources/templates/index", "bundler/resources/templates/index", "bundler/resources/templates/index", "bundler/resources/templates/index", "bundler/resources/templates/index", "path"], function (require, exports, index_2, index_3, index_4, index_5, index_6, index_7, path_7) {
        "use strict";
        exports.__esModule = true;
        exports.Resources = void 0;
        var AMDReader = (function () {
            function AMDReader() {
            }
            AMDReader.read = function (code) {
                var _a;
                var result = { defines: [], remaps: {} };
                var resource_names = {};
                var pattern = /define\s*\("(.*)",\s*\[(.*)],\s*function/gm;
                var _loop_1 = function () {
                    var match = pattern.exec(code);
                    if (match === null) {
                        return "break";
                    }
                    var type = 'module';
                    var name_1 = match[1];
                    var unmapped = match[2].split(',').map(function (text) { return text.replace(/"/g, '').trim(); });
                    var module_root = path_7.dirname('./' + name_1);
                    var dependencies = unmapped.map(function (dependency) {
                        if (dependency.includes('!')) {
                            var split = dependency.split('!').map(function (n) { return n.trim(); });
                            if (split.length === 2 &&
                                (split[0] === 'directory' ||
                                    split[0] === 'text' ||
                                    split[0] === 'json' ||
                                    split[0] === 'base64' ||
                                    split[0] === 'buffer' ||
                                    split[0] === 'css')) {
                                var directive = split[0];
                                var absoluteName = path_7.join(module_root, split[1]);
                                var resource = directive + "!" + absoluteName;
                                result.remaps[resource] = result.remaps[resource] || [];
                                result.remaps[resource].push(dependency);
                                resource_names[resource] = null;
                                return resource;
                            }
                        }
                        return dependency;
                    });
                    var define = { type: type, name: name_1, dependencies: dependencies };
                    result.defines.push(define);
                };
                while (true) {
                    var state_1 = _loop_1();
                    if (state_1 === "break")
                        break;
                }
                var resourcePathPrefix = './';
                if (result.defines.length > 0) {
                    var entry = result.defines[result.defines.length - 1];
                    var split = entry.name.split('/');
                    if (split.length > 1) {
                        resourcePathPrefix = split.slice(1).map(function (n) { return '../'; }).join('');
                    }
                }
                var resources = Object.keys(resource_names).map(function (name) {
                    var _a = __read(name.split('!'), 2), directive = _a[0], moduleName = _a[1];
                    var dependencies = ["exports"];
                    var type = 'resource';
                    var path = "" + resourcePathPrefix + moduleName;
                    return { type: type, name: name, path: path, directive: directive, dependencies: dependencies };
                });
                (_a = result.defines).unshift.apply(_a, __spread(resources));
                return result;
            };
            return AMDReader;
        }());
        var Resources = (function () {
            function Resources() {
            }
            Resources.transform = function (basePath, code) {
                var e_2, _a, e_3, _b;
                var result = AMDReader.read(code);
                try {
                    for (var _c = __values(Object.keys(result.remaps)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var key = _d.value;
                        try {
                            for (var _e = (e_3 = void 0, __values(result.remaps[key])), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var dependency = _f.value;
                                var pattern = new RegExp(dependency);
                                code = code.replace(pattern, key);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e["return"])) _b.call(_e);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var resources = result.defines.filter(function (define) { return define.type === 'resource'; });
                var fragments = resources.map(function (resource) {
                    var path = path_7.join(basePath, resource.path);
                    switch (resource.directive) {
                        case 'directory': return index_2.asDirectory(resource.name, path);
                        case 'text': return index_6.asText(resource.name, path);
                        case 'json': return index_5.asJson(resource.name, path);
                        case 'base64': return index_3.asBase64(resource.name, path);
                        case 'buffer': return index_4.asBuffer(resource.name, path);
                        case 'css': return index_7.asCss(resource.name, path);
                        default: throw Error("unknown directive '" + resource.directive + "'");
                    }
                });
                return __spread(fragments, [code]).join('\n');
            };
            return Resources;
        }());
        exports.Resources = Resources;
    });
    define("bundler/resources/index", ["require", "exports", "bundler/resources/resources"], function (require, exports, resources_1) {
        "use strict";
        exports.__esModule = true;
        exports.Resources = void 0;
        __createBinding(exports, resources_1, "Resources");
    });
    define("bundler/transforms/transform", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports.Transform = void 0;
        var Transform = (function () {
            function Transform() {
            }
            Transform.typescriptOutput = function (transforms, code) {
                var e_4, _a;
                try {
                    for (var transforms_1 = __values(transforms), transforms_1_1 = transforms_1.next(); !transforms_1_1.done; transforms_1_1 = transforms_1.next()) {
                        var transform = transforms_1_1.value;
                        var instance = require(transform);
                        if (instance.typescriptOutput) {
                            code = instance.typescriptOutput(code);
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (transforms_1_1 && !transforms_1_1.done && (_a = transforms_1["return"])) _a.call(transforms_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                return code;
            };
            Transform.bundleOutput = function (transforms, code) {
                var e_5, _a;
                try {
                    for (var transforms_2 = __values(transforms), transforms_2_1 = transforms_2.next(); !transforms_2_1.done; transforms_2_1 = transforms_2.next()) {
                        var transform = transforms_2_1.value;
                        var instance = require(transform);
                        if (instance.bundleOutput) {
                            code = instance.bundleOutput(code);
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (transforms_2_1 && !transforms_2_1.done && (_a = transforms_2["return"])) _a.call(transforms_2);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                return code;
            };
            return Transform;
        }());
        exports.Transform = Transform;
    });
    define("bundler/transforms/index", ["require", "exports", "bundler/transforms/transform"], function (require, exports, transform_1) {
        "use strict";
        exports.__esModule = true;
        exports.Transform = void 0;
        __createBinding(exports, transform_1, "Transform");
    });
    define("bundler/loader/templates/es3", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(function () {\n    var defines = {};\n    var entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies: dependencies, factory: factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], function (exports) {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: function (name) { return resolve(name); } });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            var dependencies = ['exports'];\n            var factory = function (exports) {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies: dependencies, factory: factory };\n        }\n    }\n    var instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        var define = get_define(name);\n        instances[name] = {};\n        var dependencies = define.dependencies.map(function (name) { return resolve(name); });\n        define.factory.apply(define, dependencies);\n        var exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports[\"default\"] : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es5", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(function () {\n    var defines = {};\n    var entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies: dependencies, factory: factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], function (exports) {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: function (name) { return resolve(name); } });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            var dependencies = ['exports'];\n            var factory = function (exports) {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies: dependencies, factory: factory };\n        }\n    }\n    var instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        var define = get_define(name);\n        instances[name] = {};\n        var dependencies = define.dependencies.map(function (name) { return resolve(name); });\n        define.factory.apply(define, dependencies);\n        var exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es6", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es2015", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es2016", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es2017", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/es2018", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch (_a) {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/templates/esnext", ["require", "exports"], function (require, exports) {
        "use strict";
        exports.__esModule = true;
        exports["default"] = "(() => {\n    const defines = {};\n    const entry = [null];\n    function define(name, dependencies, factory) {\n        defines[name] = { dependencies, factory };\n        entry[0] = name;\n    }\n    define(\"require\", [\"exports\"], (exports) => {\n        Object.defineProperty(exports, \"__cjsModule\", { value: true });\n        Object.defineProperty(exports, \"default\", { value: (name) => resolve(name) });\n    });\n    'marker:bundle';\n    function get_define(name) {\n        if (defines[name]) {\n            return defines[name];\n        }\n        else if (defines[name + '/index']) {\n            return defines[name + '/index'];\n        }\n        else {\n            const dependencies = ['exports'];\n            const factory = (exports) => {\n                try {\n                    Object.defineProperty(exports, \"__cjsModule\", { value: true });\n                    Object.defineProperty(exports, \"default\", { value: require(name) });\n                }\n                catch {\n                    throw Error(['module \"', name, '\" not found.'].join(''));\n                }\n            };\n            return { dependencies, factory };\n        }\n    }\n    const instances = {};\n    function resolve(name) {\n        if (instances[name]) {\n            return instances[name];\n        }\n        if (name === 'exports') {\n            return {};\n        }\n        const define = get_define(name);\n        instances[name] = {};\n        const dependencies = define.dependencies.map(name => resolve(name));\n        define.factory(...dependencies);\n        const exports = dependencies[define.dependencies.indexOf('exports')];\n        instances[name] = (exports['__cjsModule']) ? exports.default : exports;\n        return instances[name];\n    }\n    if (entry[0] !== null) {\n        return resolve(\"marker:entry\");\n    }\n})();";
    });
    define("bundler/loader/loader", ["require", "exports", "bundler/loader/templates/es3", "bundler/loader/templates/es5", "bundler/loader/templates/es6", "bundler/loader/templates/es2015", "bundler/loader/templates/es2016", "bundler/loader/templates/es2017", "bundler/loader/templates/es2018", "bundler/loader/templates/esnext"], function (require, exports, es3_1, es5_1, es6_1, es2015_1, es2016_1, es2017_1, es2018_1, esnext_1) {
        "use strict";
        exports.__esModule = true;
        exports.Loader = void 0;
        var Loader = (function () {
            function Loader() {
            }
            Loader.getLoaderTemplate = function (target) {
                var marker = "'marker:bundle';";
                switch (target) {
                    case 'unknown': return es3_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es3': return es3_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es5': return es5_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es6': return es6_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es2015': return es2015_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es2016': return es2016_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es2017': return es2017_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'es2018': return es2018_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    case 'esnext': return esnext_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                    default: return esnext_1["default"].split(marker).map(function (n) { return n.trimRight(); });
                }
            };
            Loader.indent = function (code) {
                return code.split("\n").map(function (line) { return "    " + line; }).join("\n");
            };
            Loader.resolveExportAs = function (exportAs) {
                if (exportAs === null || exportAs === undefined) {
                    return '';
                }
                else if (exportAs === 'commonjs') {
                    return 'module.exports = ';
                }
                else {
                    return "var " + exportAs + " = ";
                }
            };
            Loader.resolveImportAs = function (imports) {
                return imports.map(function (importAs) {
                    switch (importAs.type) {
                        case 'default': return [
                            "define(\"" + importAs.inner + "\", [\"exports\"], function(exports) {",
                            "    Object.defineProperty(exports, \"__esModule\", { value: true });",
                            "    Object.defineProperty(exports, \"default\", { value: window['" + importAs.outer + "'] });",
                            "});"
                        ].join('\n');
                        case 'namespace': return [
                            "define(\"" + importAs.inner + "\", [\"exports\"], function(exports) {",
                            "    Object.defineProperty(exports, \"__cjsModule\", { value: true });",
                            "    Object.defineProperty(exports, \"default\", { value: window['" + importAs.outer + "'] });",
                            "});"
                        ].join('\n');
                    }
                });
            };
            Loader.resolveEntryModule = function (tfooter, entryPoint) {
                return (entryPoint !== undefined)
                    ? tfooter.replace('"marker:entry"', "\"" + entryPoint + "\"")
                    : tfooter.replace('"marker:entry"', "entry[0]");
            };
            Loader.transform = function (options, code) {
                var _a = __read(this.getLoaderTemplate(options.esTarget), 2), theader = _a[0], tfooter = _a[1];
                var texports = this.resolveExportAs(options.exportAs);
                var timports = this.resolveImportAs(options.importAs);
                var header = "" + texports + theader;
                var marker = "'marker:" + "resolver';";
                var body = this.indent(__spread(timports, [code, marker]).join('\n'));
                var footer = this.resolveEntryModule(tfooter, options.entryPoint);
                return [header, body, footer].join('\n');
            };
            return Loader;
        }());
        exports.Loader = Loader;
    });
    define("bundler/bundler", ["require", "exports", "bundler/resources/index", "bundler/transforms/index", "bundler/loader/loader"], function (require, exports, index_8, index_9, loader_1) {
        "use strict";
        exports.__esModule = true;
        exports.Bundler = void 0;
        var Bundler = (function () {
            function Bundler() {
            }
            Bundler.shouldBundle = function (code) {
                return code.includes("'marker:" + "resolver';") === false;
            };
            Bundler.bundle = function (code, options) {
                options.exportAs = options.exportAs || null;
                options.importAs = options.importAs || [];
                code = index_9.Transform.typescriptOutput(options.transforms, code);
                code = index_8.Resources.transform(options.projectRoot, code);
                code = loader_1.Loader.transform({
                    entryPoint: options.entryPoint,
                    esTarget: options.esTarget,
                    importAs: options.importAs,
                    exportAs: options.exportAs
                }, code);
                return index_9.Transform.bundleOutput(options.transforms, code);
            };
            return Bundler;
        }());
        exports.Bundler = Bundler;
    });
    define("bundler/index", ["require", "exports", "bundler/bundler"], function (require, exports, bundler_1) {
        "use strict";
        exports.__esModule = true;
        exports.Bundler = void 0;
        __createBinding(exports, bundler_1, "Bundler");
    });
    define("index", ["require", "exports", "compiler/index", "command/index", "bundler/index", "compiler/index", "fs"], function (require, exports, index_10, index_11, index_12, index_13, fs_10) {
        "use strict";
        exports.__esModule = true;
        function info() {
            return __awaiter(this, void 0, void 0, function () {
                var green, esc;
                return __generator(this, function (_a) {
                    green = '\x1b[32m';
                    esc = '\x1b[0m';
                    console.log("Version 1.0.17\n\nExamples: " + green + "tsc-bundle" + esc + " index.ts\n          " + green + "tsc-bundle" + esc + " tsconfig.json\n          " + green + "tsc-bundle" + esc + " script.ts --exportAs Foo\n          " + green + "tsc-bundle" + esc + " index.ts --outFile bundle.js\n          " + green + "tsc-bundle" + esc + " index.ts --transform script.js\n\nOptions:\n  --outFile         Outputs the bundle with the give filepath.\n  --target          Sets the ES Target for the bundle.\n  --exportAs        Exports bundle exports as a global variable.\n  --importAs        Imports global variable as a module (namespace).\n  --importAsDefault Imports global variable as a module (default).\n  --entryPoint      Overrides the default entry point for the bundle.\n  --transform       Applies a transform to the bundle.\n  --watch           Starts the compiler in watch mode.\n  --debug           Prints debug information.\n  ");
                    return [2];
                });
            });
        }
        function writeError(errorText) {
            console.log(errorText);
        }
        function getOptions(commandOptions) {
            try {
                var typescriptOptions = {
                    type: 'script',
                    esTarget: 'es3',
                    inFile: '',
                    outFile: '',
                    watch: false
                };
                var bundlerOptions = {
                    esTarget: 'es3',
                    projectRoot: '',
                    importAs: [],
                    exportAs: null,
                    entryPoint: undefined,
                    transforms: []
                };
                if (commandOptions.inFileType === 'project') {
                    var defaults = index_10.TypeScriptConfiguration.resolveTargetAndOutFileFromTsConfig(commandOptions.inFile);
                    typescriptOptions.type = 'project';
                    typescriptOptions.outFile = defaults.outFile;
                    typescriptOptions.esTarget = defaults.esTarget;
                    bundlerOptions.esTarget = defaults.esTarget;
                }
                else {
                    var defaults = index_10.TypeScriptConfiguration.resolveTargetAndOutFileFromScript(commandOptions.inFile);
                    typescriptOptions.type = 'script';
                    typescriptOptions.outFile = defaults.outFile;
                    typescriptOptions.esTarget = defaults.esTarget;
                    bundlerOptions.esTarget = defaults.esTarget;
                }
                typescriptOptions.inFile = commandOptions.inFile;
                if (commandOptions.outFile) {
                    typescriptOptions.outFile = commandOptions.outFile;
                }
                if (commandOptions.esTarget) {
                    typescriptOptions.esTarget = commandOptions.esTarget;
                    bundlerOptions.esTarget = commandOptions.esTarget;
                }
                if (commandOptions.watch) {
                    typescriptOptions.watch = true;
                }
                bundlerOptions.projectRoot = commandOptions.projectRoot;
                bundlerOptions.exportAs = commandOptions.exportAs;
                bundlerOptions.importAs = commandOptions.importAs;
                bundlerOptions.entryPoint = commandOptions.entryPoint;
                bundlerOptions.transforms = commandOptions.transforms;
                return [typescriptOptions, bundlerOptions];
            }
            catch (error) {
                writeError(error.message);
                process.exit(1);
            }
        }
        function bundle(commandOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, typescriptOptions, bundlerOptions, error_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = __read(getOptions(commandOptions), 2), typescriptOptions = _a[0], bundlerOptions = _a[1];
                            if (commandOptions.debug) {
                                console.log();
                                console.log('COMMAND', commandOptions);
                                console.log();
                                console.log("TYPESCRIPT", typescriptOptions);
                                console.log();
                                console.log("BUNDLER", bundlerOptions);
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, index_13.TypeScript.compile(typescriptOptions, function (diagnostic) { return process.stdout.write(diagnostic); }, function (content) {
                                    if (index_12.Bundler.shouldBundle(content)) {
                                        var bundle_1 = index_12.Bundler.bundle(content, bundlerOptions);
                                        fs_10.writeFileSync(typescriptOptions.outFile, bundle_1, 'utf8');
                                    }
                                })];
                        case 2:
                            _b.sent();
                            return [3, 4];
                        case 3:
                            error_2 = _b.sent();
                            writeError(error_2.message);
                            process.exit(error_2.exitcode);
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            });
        }
        function run(argv) {
            return __awaiter(this, void 0, void 0, function () {
                var commandOptions;
                return __generator(this, function (_a) {
                    commandOptions = index_11.Command.parse(argv);
                    switch (commandOptions.commandType) {
                        case 'info': return [2, info()];
                        case 'bundle': return [2, bundle(commandOptions)];
                        case 'error': return [2, writeError(commandOptions.errorText)];
                    }
                    return [2];
                });
            });
        }
        run(process.argv);
    });
    
    'marker:resolver';

    function get_define(name) {
        if (defines[name]) {
            return defines[name];
        }
        else if (defines[name + '/index']) {
            return defines[name + '/index'];
        }
        else {
            var dependencies = ['exports'];
            var factory = function (exports) {
                try {
                    Object.defineProperty(exports, "__cjsModule", { value: true });
                    Object.defineProperty(exports, "default", { value: require(name) });
                }
                catch (_a) {
                    throw Error(['module "', name, '" not found.'].join(''));
                }
            };
            return { dependencies: dependencies, factory: factory };
        }
    }
    var instances = {};
    function resolve(name) {
        if (instances[name]) {
            return instances[name];
        }
        if (name === 'exports') {
            return {};
        }
        var define = get_define(name);
        instances[name] = {};
        var dependencies = define.dependencies.map(function (name) { return resolve(name); });
        define.factory.apply(define, dependencies);
        var exports = dependencies[define.dependencies.indexOf('exports')];
        instances[name] = (exports['__cjsModule']) ? exports["default"] : exports;
        return instances[name];
    }
    if (entry[0] !== null) {
        return resolve(entry[0]);
    }
})();